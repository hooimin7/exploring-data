# OLD CODE BELOW FOR REFERENCE
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
results
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
J
A
J
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin1_mod.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3ei.R")
rm(list = ls())
# First load the deSolve package:
library(deSolve)
# set up a vector of time-points for the output:
timevec <- seq( 0, 10, by=0.1 )
# we need a list of parameters:
P <- list( r=2, a=1, mu=2 )
np0 <- c(n=2,p=1) # initial population sizes
# define the growth function:
LV_sys <- function(t, np, P) {
# extract vector content:
n <- np[1]
p <- np[2]
# calculate the two growth rates:
dndt <- P$r*n - P$a*n*p
dpdt <- P$a*n*p - P$mu*p
list(c(dndt, dpdt )) # the result as a vector in a list
}
# call the ode function to solve the differnetial equation:
out <- ode( y = np0, func = LV_sys, times = timevec, parms = P)
time <- out[,'time']
n <- out[,'n']
p <- out[,'p']
# plot the output in two panels:
op <- par(mfrow=c(2,1))
# first population sizes over time:
plot( time, n, type='l', col='blue' )
lines( time, p, type='l', col='red' )
# next the phase plane, starting with the isoclines:
LV_isoclines(P$r, P$a, P$mu)
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3ei.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3ei.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3ei.R")
source("~/git_hm/hooimin7/BIOS13/MultiD sys/multiDimentional_exercise.R")
source("~/git_hm/hooimin7/BIOS13/BIO13_examQ3eii.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3ei.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3ei.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3ei.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3ei.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3ei.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3ei.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3ei.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
rm(list = ls())
rm(list = ls())
library(MASS)
library(dplyr)
library(psych)
dat = read.csv("~/git/exploring-data/BIOS14/exam2023_data.csv")
# Convert Date object to factor
dat$Date = as.Date(dat$Date, format = "%d/%m/%Y")
# Convert Date object to factor
dat$Date = as.Date(dat$Date, format = "%d/%m/%Y")
dat$Date = as.factor(dat$Date)
dat$Season = as.factor(dat$Season) # Convert Season object to factor
dat$Property = as.factor(dat$Property) # Convert Property object to factor
dat$Aspect = as.factor(dat$Aspect) # Convert Aspect object to factor
dat$Landscape.position = as.factor(dat$Landscape.position) # Convert Landscape.
colnames(dat) # Column names in 'dat'
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3ei.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3ei.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3ei.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3ei.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3f_HooiMin.R")
source("~/git_hm/hooimin7/BIOS13/BIOS13_examQ3d_HooiMin2.R")
model_7 <- glm.nb(cbind(euc_sdlgs0_50cm, euc_sdlgs50cm.2m, euc_sdlgs.2m) ~
group_Exotic + group_Native + Euc_canopy_cover
+ Distance_to_Eucalypt_canopy.m., data = dat)
model_8 <- glm.nb(cbind(euc_sdlgs0_50cm, euc_sdlgs50cm.2m) ~
group_Exotic + group_Native + Euc_canopy_cover
+ Distance_to_Eucalypt_canopy.m., data = dat)
model_9 <- glm.nb(euc_sdlgs0_50cm ~ group_Exotic + group_Native + Euc_canopy_cover
+ Distance_to_Eucalypt_canopy.m., data = dat)
rm(list = ls())
library(MASS)
library(dplyr)
library(psych)
dat = read.csv("~/git/exploring-data/BIOS14/exam2023_data.csv")
# Convert Date object to factor
dat$Date = as.Date(dat$Date, format = "%d/%m/%Y")
dat$Date = as.factor(dat$Date)
dat$Season = as.factor(dat$Season) # Convert Season object to factor
dat$Property = as.factor(dat$Property) # Convert Property object to factor
dat$Aspect = as.factor(dat$Aspect) # Convert Aspect object to factor
dat$Landscape.position = as.factor(dat$Landscape.position) # Convert Landscape.
# Removing rows with missing values
dat <- na.omit(dat)
model_7 <- glm.nb(cbind(euc_sdlgs0_50cm, euc_sdlgs50cm.2m, euc_sdlgs.2m) ~
group_Exotic + group_Native + Euc_canopy_cover
+ Distance_to_Eucalypt_canopy.m., data = dat)
model_8 <- glm.nb(cbind(euc_sdlgs0_50cm, euc_sdlgs50cm.2m) ~
group_Exotic + group_Native + Euc_canopy_cover
+ Distance_to_Eucalypt_canopy.m., data = dat)
model_9 <- glm.nb(euc_sdlgs0_50cm ~ group_Exotic + group_Native + Euc_canopy_cover
+ Distance_to_Eucalypt_canopy.m., data = dat)
dat$group_Exotic <- rowSums(dat[, 10:14])
dat$group_Native <- rowSums(dat[, 15:19])
# Removing rows with missing values
dat <- na.omit(dat)
model_7 <- glm.nb(cbind(euc_sdlgs0_50cm, euc_sdlgs50cm.2m, euc_sdlgs.2m) ~
group_Exotic + group_Native + Euc_canopy_cover
+ Distance_to_Eucalypt_canopy.m., data = dat)
rm(list = ls())
library(MASS)
library(dplyr)
library(psych)
dat = read.csv("~/git/exploring-data/BIOS14/exam2023_data.csv")
# Convert Date object to factor
dat$Date = as.Date(dat$Date, format = "%d/%m/%Y")
dat$Date = as.factor(dat$Date)
dat$Season = as.factor(dat$Season) # Convert Season object to factor
dat$Property = as.factor(dat$Property) # Convert Property object to factor
dat$Aspect = as.factor(dat$Aspect) # Convert Aspect object to factor
dat$Landscape.position = as.factor(dat$Landscape.position) # Convert Landscape.
# Assuming the column numbers 10 to 14 represent group_Exotic and 15 to 19
# represent group_Native
group_Exotic <- dat[, 10:14]
rm(list = ls())
library(MASS)
library(dplyr)
library(psych)
source("~/git/exploring-data/BIOS14/BIOS14_exam_hooimin.R")
AICTab
rm(list = ls())
########################
x = rnorm(200, 10, 3)
eta = -2 + 0.4*x + rnorm(200, 0, 2)
p = invlogit(eta) #Probability
y = rbinom(200, 1, p)
par(mfrow=c(1,3))
plot(x, eta, las=1) #Linear predictor
plot(x, p, las=1) #Probability
plot(x, y, las=1) #Response
m = glm(y~x, family=binomial(link="logit"))
summary(m)
m = glm(y~x, family=binomial(link="logit"))
########################
x = rnorm(200, 10, 3)
eta = -2 + 0.4*x + rnorm(200, 0, 2)
p = invlogit(eta) #Probability
y = rbinom(200, 1, p)
par(mfrow=c(1,3))
plot(x, eta, las=1) #Linear predictor
plot(x, p, las=1) #Probability
plot(x, y, las=1) #Response
m = glm(y~x, family=binomial(link="logit"))
summary(m)
y
p
eta
eta = -2 + 0.4*x + rnorm(200, 0, 2)
p = invlogit(eta) #Probability
y = rbinom(200, 1, p)
par(mfrow=c(1,3))
plot(x, eta, las=1) #Linear predictor
plot(x, p, las=1) #Probability
plot(x, y, las=1) #Response
m = glm(y~x, family=binomial(link="logit"))
summary(m)
coefs = summary(m)$coef
x_pred = seq(from=min(x), to=max(x), by=0.01)
y_hat = coefs[1,1] + coefs[2,1]*x_pred
p_hat = invlogit(y_hat)
invlogit(eta)
########################
logit = function(x) log(x/(1-x)) #logit function
invlogit = function(x) 1/(1+exp(-x)) #inverse logit function
x = rnorm(200, 10, 3)
eta = -2 + 0.4*x + rnorm(200, 0, 2)
p = invlogit(eta) #Probability
y = rbinom(200, 1, p)
par(mfrow=c(1,3))
plot(x, eta, las=1) #Linear predictor
plot(x, p, las=1) #Probability
plot(x, y, las=1) #Response
m = glm(y~x, family=binomial(link="logit"))
summary(m)
coefs = summary(m)$coef
x_pred = seq(from=min(x), to=max(x), by=0.01)
y_hat = coefs[1,1] + coefs[2,1]*x_pred
p_hat = invlogit(y_hat)
summary(m)
coefs
summary(m)
coefs
source("~/git/exploring-data/BIOS14/BIOS14_exam_hooimin.R")
source("~/git/exploring-data/BIOS14/BIOS14_exam_hooimin.R")
AICTab
# Compare the Summary of Each Model
# summary(model_0)
# summary(model_1)
# summary(model_2)
summary(model_0)
exp(coefs[1,1]) #Intercept
exp(coefs[1,1] + coefs[3,1]) # Intercept + Distance_to_Eucalypt_canopy.m.
exp(coefs[2,1]) #Exotic
exp(coefs[1,1] + coefs[2,1]) # Intercept + Exotic
source("~/git/exploring-data/BIOS14/BIOS14_exam_hooimin.R")
exp(coefs[1,1] + coefs[2,1]) # Intercept + Exotic
meta = read.csv("~/git/exploring-data/BIOS14/exam2023_metadata.csv")
View(meta)
source("~/git/exploring-data/BIOS14/BIOS14_exam_hooimin.R")
AICTab
source("~/git/exploring-data/BIOS14/BIOS14_exam_hooimin_Final.R")
View(meta)
View(dat)
View(combined_groups_euc50_2)
View(dat)
dat$group_Exotic.decimal <- row(c(dat[, 10:14]/100))
View(dat)
# Columns 10 to 14 contain percentage values
dat <- dat %>%
mutate(group_Exotic.decimal = rowSums(select(., 10:14) / 100))
View(dat)
# Assuming columns 10 to 14 contain percentage values
dat <- dat %>%
mutate(group_Exotic.decimal = rowSums(select(., 10:14) / 100),
group_Exotic.decimal = group_Exotic.decimal / 5)  # Divide the column by 5
# Assuming columns 10 to 14 contain percentage values
dat <- dat %>%
mutate(
group_Exotic.decimal = rowSums(select(., 10:14) / 100),  # Sum percentages and divide by 100
group_Exotic.decimal = group_Exotic.decimal / 5,          # Divide the column by 5
group_Exotic.decimal = group_Exotic.decimal * 100         # Multiply by 100 to get percentage
)
rm(list = ls())
library(MASS)
library(dplyr)
library(psych)
dat = read.csv("~/git/exploring-data/BIOS14/exam2023_data.csv")
meta = read.csv("~/git/exploring-data/BIOS14/exam2023_metadata.csv")
# Convert Date object to factor
dat$Date = as.Date(dat$Date, format = "%d/%m/%Y")
dat$Date = as.factor(dat$Date) # Convert Date object to factor
dat$Season = as.factor(dat$Season) # Convert Season object to factor
dat$Property = as.factor(dat$Property) # Convert Property object to factor
dat$Aspect = as.factor(dat$Aspect) # Convert Aspect object to factor
dat$Landscape.position = as.factor(dat$Landscape.position) # Convert Landscape.
# Assuming the column numbers 10 to 14 represent group_Exotic and 15 to 19
# represent group_Native
# Grouping for pairwise scatterplots
group_Exotic <- dat[, 10:14]
group_Native <- dat[, 15:19]
group_seedling <- dat[, 26:28]
# Use pairs.panels
pairs.panels(dat[, 24:28], lm = TRUE) # seedlings vs distance
# Summing columns 26 through 28 to create 'group_seedling'
# Grouping for data exploration
dat$group_seedling <- rowSums(dat[, 26:28])
# Assuming columns 10 to 14 contain percentage values
dat <- dat %>%
mutate(
group_Exotic.decimal = rowSums(select(., 10:14) / 100),  # Sum percentages and divide by 100
group_Exotic.decimal = group_Exotic.decimal / 5,          # Divide the column by 5
group_Exotic.decimal = group_Exotic.decimal * 100         # Multiply by 100 to get percentage
)
View(dat)
rm(list = ls())
library(MASS)
library(dplyr)
library(psych)
dat = read.csv("~/git/exploring-data/BIOS14/exam2023_data.csv")
meta = read.csv("~/git/exploring-data/BIOS14/exam2023_metadata.csv")
# Convert Date object to factor
dat$Date = as.Date(dat$Date, format = "%d/%m/%Y")
dat$Date = as.factor(dat$Date) # Convert Date object to factor
dat$Season = as.factor(dat$Season) # Convert Season object to factor
dat$Property = as.factor(dat$Property) # Convert Property object to factor
dat$Aspect = as.factor(dat$Aspect) # Convert Aspect object to factor
dat$Landscape.position = as.factor(dat$Landscape.position) # Convert Landscape.
# Assuming the column numbers 10 to 14 represent group_Exotic and 15 to 19
# represent group_Native
# Grouping for pairwise scatterplots
group_Exotic <- dat[, 10:14]
group_Native <- dat[, 15:19]
group_seedling <- dat[, 26:28]
# Summing columns 26 through 28 to create 'group_seedling'
# Grouping for data exploration
dat$group_seedling <- rowSums(dat[, 26:28])
# Assuming columns 10 to 14 contain percentage values
dat <- dat %>%
mutate(
group_Exotic = rowSums(select(., 10:14) / 100),  # Sum percentages and divide by 100
group_Exotic = group_Exotic / 5,          # Divide the column by 5
group_Exotic = group_Exotic * 100         # Multiply by 100 to get percentage
)
View(dat)
# Assuming columns 10 to 14 contain percentage values
dat <- dat %>%
mutate(
group_Exotic = rowSums(select(., 10:14) / 100),  # Sum percentages and divide by 100
group_Exotic = group_Exotic / 5,          # Divide the column by 5
group_Exotic = group_Exotic * 100         # Multiply by 100 to get percentage
)
dat <- dat %>%
mutate(
group_Native = rowSums(select(., 15:19) / 100),  # Sum percentages and divide by 100
group_Native = group_Native / 5,          # Divide the column by 5
group_Native = group_Native * 100         # Multiply by 100 to get percentage
)
ncol(dat) # Number of columns in 'dat'
nrow(dat) # Number of rows in 'dat'
colnames(dat) # Column names in 'dat'
# Removing rows with missing values
dat <- na.omit(dat)
# Running the Poisson regression
model_P0 <- glm(group_seedling ~ group_Exotic + group_Native, data = dat, family = poisson)
model_P1 <- glm(group_seedling ~ group_Exotic * group_Native, data = dat,
family = poisson)
model_P2 <- glm(group_seedling ~ group_Exotic + group_Native + Euc_canopy_cover,
data = dat, family = poisson)
model_P3 <- glm(group_seedling ~ group_Exotic + group_Native + Euc_canopy_cover
+ Distance_to_Eucalypt_canopy.m., data = dat, family = poisson)
model_P4 <- glm(group_seedling ~ group_Native * Euc_canopy_cover,
data = dat, family = poisson)
model_P5 <- glm(group_seedling ~ group_Native * Distance_to_Eucalypt_canopy.m.,
data = dat, family = poisson)
model_P6 <- glm(group_seedling ~ group_Exotic * Euc_canopy_cover,
data = dat, family = poisson)
mlist = list(model_P0, model_P1, model_P2, model_P3, model_P4, model_P5, model_P6)
AICTab = AIC(model_P0, model_P1, model_P2, model_P3, model_P4, model_P5, model_P6)
AICTab$logLik = unlist(lapply(mlist, logLik))
AICTab = AICTab[order(AICTab$AIC, decreasing=F),]
AICTab$delta = round(AICTab$AIC - min(AICTab$AIC), 2)
lh = exp(-0.5*AICTab$delta)
AICTab$w = round(lh/sum(lh), 2)
AICTab
summary(model_P3) # Model with the lowest AIC value
# Negative Binomial Regression
model_0 <- glm.nb(group_seedling ~ group_Exotic + Distance_to_Eucalypt_canopy.m.,
data = dat)
model_1 <- glm.nb(group_seedling ~ group_Exotic + group_Native, data = dat)
model_2 <- glm.nb(group_seedling ~ group_Exotic * group_Native, data = dat)
model_3 <- glm.nb(group_seedling ~ group_Exotic + group_Native + Euc_canopy_cover,
data = dat)
model_4 <- glm.nb(group_seedling ~ group_Exotic * Euc_canopy_cover,
data = dat)
model_5 <- glm.nb(group_seedling ~ group_Exotic + group_Native + Euc_canopy_cover
+ Distance_to_Eucalypt_canopy.m., data = dat)
model_6 <- glm.nb(group_seedling ~ group_Native * Distance_to_Eucalypt_canopy.m.,
data = dat)
mlist = list(model_0, model_1, model_2, model_3, model_4, model_5, model_6)
AICTab = AIC(model_0, model_1, model_2, model_3, model_4, model_5, model_6)
AICTab$logLik = unlist(lapply(mlist, logLik))
AICTab = AICTab[order(AICTab$AIC, decreasing=F),]
AICTab$delta = round(AICTab$AIC - min(AICTab$AIC), 2)
lh = exp(-0.5*AICTab$delta)
AICTab$w = round(lh/sum(lh), 2)
AICTab
AICTab
# Compare the Summary of Each Model
# summary(model_0)
# summary(model_1)
# summary(model_2)
summary(model_0)
coefs = summary(model_0)$coef
coefs = summary(model_0)$coef
exp(coefs[1,1]) #Intercept
exp(coefs[1,1]) #Intercept
exp(coefs[1,1] + coefs[2,1]) # Intercept + Exotic
exp(coefs[1,1] + coefs[3,1]) # Intercept + Distance_to_Eucalypt_canopy.m.
exp(coefs[1,1]) #Intercept
exp(coefs[1,1] + coefs[2,1]) # Intercept + Exotic
exp(coefs[1,1] + coefs[3,1]) # Intercept + Distance_to_Eucalypt_canopy.m.
exp(coefs[1,1] + coefs[3,1]) # Intercept + Distance_to_Eucalypt_canopy.m.
plot(dat$Distance_to_Eucalypt_canopy.m., dat$group_seedling, xlab="Distance to Eucalypt canopy (m)",
ylab = "Number of seedlings", main = "Number of Seedlings vs Distance",
col = 'grey', las = 1)
newDistance = seq(min(dat$Distance_to_Eucalypt_canopy.m.),
max(dat$Distance_to_Eucalypt_canopy.m.), length.out=200)
newExotic = rep(mean(dat$group_Exotic), length(newDistance)) # Predictor values
y_hat = predict(model_0, newdata = list(group_Exotic = newExotic,
Distance_to_Eucalypt_canopy.m. = newDistance),
type = "response")
# Plot predicted values
lines(newDistance, y_hat, lwd=2)
newExotic2 = rep(mean(dat$group_Exotic)+sd(dat$group_Exotic), length(newDistance))
y_hat2 = predict(model_0, newdata=list(group_Exotic = newExotic2,
Distance_to_Eucalypt_canopy.m. = newDistance),
type = "response")
newExotic3 = rep(mean(dat$group_Exotic)-sd(dat$group_Exotic), length(newDistance))
y_hat3 = predict(model_0, newdata=list(group_Exotic = newExotic3,
Distance_to_Eucalypt_canopy.m. = newDistance),
type = "response")
lines(newDistance, y_hat2, lwd=2, col="blueviolet")
lines(newDistance, y_hat3, lwd=2, col="darkgoldenrod")
legend("topleft", lty=1, lwd=2, col=c(1, "blueviolet", "darkgoldenrod"), bty="n",
legend=c("Exotic = Mean",
"Exotic = Mean + SD",
"Exotic = Mean - SD"))
abline(h=exp(coefs[1,1]), lty=2) # Intercept
abline(h=exp(coefs[1,1] + coefs[3,1]), lty=2, col="red") # Intercept +
# Distance_to_Eucalypt_canopy.m.
plot(dat$Distance_to_Eucalypt_canopy.m., dat$group_seedling, xlab="Distance to Eucalypt canopy (m)",
ylab = "Number of seedlings", main = "Number of Seedlings vs Distance",
col = 'grey', las = 1)
newDistance = seq(min(dat$Distance_to_Eucalypt_canopy.m.),
max(dat$Distance_to_Eucalypt_canopy.m.), length.out=200)
newExotic = rep(mean(dat$group_Exotic), length(newDistance)) # Predictor values
y_hat = predict(model_0, newdata = list(group_Exotic = newExotic,
Distance_to_Eucalypt_canopy.m. = newDistance),
type = "response")
# Plot predicted values
lines(newDistance, y_hat, lwd=2)
newExotic2 = rep(mean(dat$group_Exotic)+sd(dat$group_Exotic), length(newDistance))
y_hat2 = predict(model_0, newdata=list(group_Exotic = newExotic2,
Distance_to_Eucalypt_canopy.m. = newDistance),
type = "response")
newExotic3 = rep(mean(dat$group_Exotic)-sd(dat$group_Exotic), length(newDistance))
y_hat3 = predict(model_0, newdata=list(group_Exotic = newExotic3,
Distance_to_Eucalypt_canopy.m. = newDistance),
type = "response")
lines(newDistance, y_hat2, lwd=2, col="blueviolet")
lines(newDistance, y_hat3, lwd=2, col="darkgoldenrod")
legend("topleft", lty=1, lwd=2, col=c(1, "blueviolet", "darkgoldenrod"), bty="n",
legend=c("Exotic = Mean",
"Exotic = Mean + SD",
"Exotic = Mean - SD"))
abline(h=exp(coefs[1,1]), lty=2) # Intercept
abline(h=exp(coefs[1,1] + coefs[3,1]), lty=2, col="red") # Intercept +
# Compare the Summary of Each Model
# summary(model_0)
# summary(model_1)
# summary(model_2)
summary(model_0)
exp(coefs[1,1]) #Intercept
exp(coefs[1,1] + coefs[3,1]) # Intercept + Distance_to_Eucalypt_canopy.m.
source("~/git/exploring-data/BIOS14/BIOS14_exam_hooimin_Final.R")
source("~/git/exploring-data/BIOS14/BIOS14_exam_hooimin_Final.R")
# Running the Poisson regression
model_P0 <- glm(group_seedling ~ group_Exotic + group_Native, data = dat, family = poisson)
model_P1 <- glm(group_seedling ~ group_Exotic * group_Native, data = dat,
family = poisson)
model_P2 <- glm(group_seedling ~ group_Exotic + group_Native + Euc_canopy_cover,
data = dat, family = poisson)
model_P3 <- glm(group_seedling ~ group_Exotic + group_Native + Euc_canopy_cover
+ Distance_to_Eucalypt_canopy.m., data = dat, family = poisson)
model_P4 <- glm(group_seedling ~ group_Native * Euc_canopy_cover,
data = dat, family = poisson)
model_P5 <- glm(group_seedling ~ group_Native * Distance_to_Eucalypt_canopy.m.,
data = dat, family = poisson)
model_P6 <- glm(group_seedling ~ group_Exotic * Euc_canopy_cover,
data = dat, family = poisson)
mlist = list(model_P0, model_P1, model_P2, model_P3, model_P4, model_P5, model_P6)
AICTab = AIC(model_P0, model_P1, model_P2, model_P3, model_P4, model_P5, model_P6)
AICTab$logLik = unlist(lapply(mlist, logLik))
AICTab = AICTab[order(AICTab$AIC, decreasing=F),]
AICTab$delta = round(AICTab$AIC - min(AICTab$AIC), 2)
lh = exp(-0.5*AICTab$delta)
AICTab$w = round(lh/sum(lh), 2)
AICTab
summary(model_P3) # Model with the lowest AIC value
source("~/git/exploring-data/BIOS14/BIOS14_exam_hooimin_Final.R")
exp(coefs[1,1]) #Intercept
colnames(dat) # Column names in 'dat'
rm(list = ls())
source("~/git/exploring-data/BIOS14/BIOS14_exam_hooimin_Final.R")
source("~/git/exploring-data/BIOS14/BIOS14_exam_hooimin_Final.R")
source("~/git/exploring-data/BIOS14/20231101Model.R")
source("~/git/exploring-data/BIOS14/BIOS14_exam_hooimin_Final.R")
View(dat)
colnames(dat) # Column names in 'dat'
source("~/git/exploring-data/BIOS14/BeeGLM_NB.R")
View(dat)
source("~/git/exploring-data/BIOS14/BIOS14_exam_hooimin_Final.R")
View(dat)
